library(dplyr)
library(ggplot2)
library(leaflet)
switrs_all <- read.csv("Collisions.csv")
switrs <- subset(switrs_all, POINT_X!=0 & POINT_Y!=0)
switrs$date <- as.Date(as.character(switrs$COLLISION_DATE), "%Y%m%d")
switrs
summary(switrs)
as.Date(as.character(switrs$DATE_), "%m/%d/%Y")
as.Date(as.character(switrs$DATE_), "%m/%d/%y")
switrs$date <- as.Date(as.character(switrs$DATE_), "%m/%d/%y")
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs, lng=switrs$POINT_X, lat=switrs$POINT_Y,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60))
str(switrs)
popupText <- paste("Date: ", date, "<br/>Time:", TIME_)
#map all data from 2013-2014
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs, lng=switrs$POINT_X, lat=switrs$POINT_Y,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60),
popup=~popupText
)
popupText <- paste("Date: ", date, "<br/>Time:", TIME_)
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs, lng=switrs$POINT_X, lat=switrs$POINT_Y,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60),
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
str(switrs)
summary(switrs)
names(switrs)
bike <- subset(switrs, BICINJ==1)
leaflet() %>% addTiles() %>%
addCircleMarkers(data=bike, lng=switrs$POINT_X, lat=switrs$POINT_Y,
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
leaflet() %>% addTiles() %>%
addCircleMarkers(data=bike, lng=switrs$POINT_X, lat=switrs$POINT_Y,
popup=~paste("Date: ", date, "<br/>Time:", TIME_))
names(switrs[,c("POINT_X","POINT_Y")])
names(switrs[,c("POINT_X","POINT_Y")]) <- c("lat","long")
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60),
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
names(switrs[,c("POINT_X","POINT_Y")]) <- c("lat","lng")
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60),
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
names(switrs)
names(switrs[,c("POINT_X","POINT_Y")])
names(switrs[,c("POINT_X","POINT_Y")]) <- c("lat","lng")
names(switrs)
names(switrs$POINT_Y) <- "lng"
names(switrs)
switrs$lat <- switrs$POINT_Y
switrs$long <- switrs$POINT_X
switrs$lat <- jitter(switrs$lat, factor = .5)
switrs$long <- jitter(switrs$long, factor = .5)
switrs$date <- as.Date(as.character(switrs$DATE_), "%m/%d/%y")
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60),
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs,
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
#take a subset for only data with lat/long
switrs <- subset(switrs_all, POINT_X!=0 & POINT_Y!=0)
#rename lat and long fields
switrs$lat <- switrs$POINT_Y
switrs$long <- switrs$POINT_X
#add jitter to points
switrs$lat <- jitter(switrs$lat, factor = .8)
switrs$long <- jitter(switrs$long, factor = .8)
#reformat dates
switrs$date <- as.Date(as.character(switrs$DATE_), "%m/%d/%y")
#map all data from 2013-2014
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs,
clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier=2, maxClusterRadius=60),
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
#take a subset for only data with lat/long
switrs <- subset(switrs_all, POINT_X!=0 & POINT_Y!=0)
#rename lat and long fields
switrs$lat <- switrs$POINT_Y
switrs$long <- switrs$POINT_X
#add jitter to points
switrs$lat <- jitter(switrs$lat, factor = .8)
switrs$long <- jitter(switrs$long, factor = .8)
#reformat dates
switrs$date <- as.Date(as.character(switrs$DATE_), "%m/%d/%y")
#map all data from 2013-2014
leaflet() %>% addTiles() %>%
addCircleMarkers(data=switrs,
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
bike <- subset(switrs, BICINJ==1)
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=6,
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_)
)
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep="")
)
subset(bike, BICKILL==1)
summary(bike$BICKILL)
offenseColor <- colorBin(rainbow(25), bike$TIME_)
offenseColor
#make color bin
bikeColor <- colorBin(rainbow(25), bike$TIME_)
#map all data from 2013-2014
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_),
)
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = ~TIME_, opacity = 1, position="bottomleft")
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = bike$TIME_, opacity = 1, position="bottomleft")
bikeColor <- colorBin(rainbow(25), bike$TIME_, bins=12)
#map all data from 2013-2014
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = bike$TIME_, opacity = 1, position="bottomleft")
bikeColor <- colorBin(rainbow(25), bike$TIME_, bins=24)
#map all data from 2013-2014
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = bike$TIME_, opacity = 1, position="bottomleft")
?addLegend
?labelFormat
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time:", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = bike$TIME_, opacity = 1, position="bottomleft", labFormat = labelFormat(
prefix = '', suffix = ':00',
transform = function(x) x/100
)
)
as.character(switrs$date)
bikeColor <- colorBin(heat.colors(25), bike$TIME_, bins=24)
#map all data from 2013-2014
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time: ", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = bike$TIME_, opacity = 1, position="bottomleft", labFormat = labelFormat(
prefix = '', suffix = ':00',
transform = function(x) x/100
)
)
?heat.colors
## create a sequential palette for usage and show colors
mypalette<-brewer.pal(7,"Greens")
image(1:7,1,as.matrix(1:7),col=mypalette,xlab="Greens (sequential)",
ylab="",xaxt="n",yaxt="n",bty="n")
## display a divergent palette
display.brewer.pal(7,"BrBG")
devAskNewPage(ask=TRUE)
## display a qualitative palette
display.brewer.pal(7,"Accent")
devAskNewPage(ask=TRUE)
## display a palettes simultanoeusly
display.brewer.all(n=10, exact.n=FALSE)
devAskNewPage(ask=TRUE)
display.brewer.all(n=10)
devAskNewPage(ask=TRUE)
display.brewer.all()
devAskNewPage(ask=TRUE)
display.brewer.all(type="div")
devAskNewPage(ask=TRUE)
display.brewer.all(type="seq")
devAskNewPage(ask=TRUE)
display.brewer.all(type="qual")
devAskNewPage(ask=TRUE)
display.brewer.all(n=5,type="div",exact.n=TRUE)
devAskNewPage(ask=TRUE)
display.brewer.all(colorblindFriendly=TRUE)
devAskNewPage(ask=TRUE)
brewer.pal.info
brewer.pal.info["Blues",]
brewer.pal.info["Blues",]$maxcolors
library(RColorBrewer)
## create a sequential palette for usage and show colors
mypalette<-brewer.pal(7,"Greens")
image(1:7,1,as.matrix(1:7),col=mypalette,xlab="Greens (sequential)",
ylab="",xaxt="n",yaxt="n",bty="n")
display.brewer.pal(7,"BrBG")
## display a qualitative palette
display.brewer.pal(7,"Accent")
## display a palettes simultanoeusly
display.brewer.all(n=10, exact.n=FALSE)
display.brewer.all(n=10)
display.brewer.all()
display.brewer.all(type="div")
display.brewer.all(type="seq")
display.brewer.all(type="qual")
display.brewer.all(n=5,type="div",exact.n=TRUE)
display.brewer.all(colorblindFriendly=TRUE)
brewer.pal.info
brewer.pal.info["Blues",]
brewer.pal.info["Blues",]$maxcolors
#make bike subset
bike <- subset(switrs, BICINJ==1)
#make color bin
bikeColor <- colorBin(rainbow(25), bike$TIME_, bins=24)
#map all data from 2013-2014
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(data=bike, stroke = FALSE, fillOpacity = 0.5, radius=8,
popup=~paste("Date: ", date, "<br/>Time: ", TIME_,"<br><a href='http://tims.berkeley.edu/tools/query/collision_details.php?no=",CASEID,"' target='_blank'>Link to Case Details</a>", sep=""),
color = ~bikeColor(TIME_)
) %>%
addLegend(title = "Time of collision", pal = bikeColor,
values = bike$TIME_, opacity = 1, position="bottomleft", labFormat = labelFormat(
prefix = '', suffix = ':00',
transform = function(x) x/100
)
)
dim(switrs)
dim(switrs)[1]
##First map
names(switrs)
switrs$MONTH_
d2 <- switrs %>% group_by(MONTH_) %>% summarise(n=n())
d2
d2$month <- factor(d2$DayOfWeek, levels= c("Jan", "Feb","Mar", "Apr","May","June","July","Aug","Sep","Oct","Nov","Dec"))
d2$month <- factor(d2$MONTH_, levels= c("Jan", "Feb","Mar", "Apr","May","June","July","Aug","Sep","Oct","Nov","Dec"))
d2
d2$MONTH_
factor(d2$MONTH_)
factor(d2$MONTH_, levels= c("Jan", "Feb","Mar", "Apr","May","June","July","Aug","Sep","Oct","Nov","Dec"))
d2 <- switrs %>% group_by(MONTH_) %>% summarise(n=n())
print(ggplot(d2, aes(x=DayOfWeek, y=n)) +
geom_bar(stat = "identity", alpha=0.3) +
theme_minimal() +
labs(x=NULL, y=NULL, title="Total crimes per day of week") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0)))
print(ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.3) +
theme_minimal() +
labs(x=NULL, y=NULL, title="Total crimes per day of week") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0)))
print(ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.3) +
theme_minimal() +
labs(title="Total crimes per day of week") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0)))
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(title="Total crimes per day of week") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0)))
print(ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(title="Total crimes per day of week") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa"))
print(ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(title="Total crimes per day of week")
ggplot(d2, aes(x=MONTH_, y=n))
d2
factor(d2$MONTH_)
d2$MONTH_ <- factor(d2$MONTH_)
ggplot(d2, aes(x=MONTH_, y=n))
ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(title="Total incidencts by Month") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0))
ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(title="Total incidencts by Month") +
scale_x_discrete(labels=c("Jan", "Feb","Mar", "Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")) +
scale_y_continuous(expand=c(0,0))
ggplot(d2, aes(x=MONTH_, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(y=NULL, x=NULL, title="Total incidencts by Month") +
scale_x_discrete(labels=c("Jan", "Feb","Mar", "Apr","May","June","July","Aug","Sep","Oct","Nov","Dec")) +
scale_y_continuous(expand=c(0,0))
unique(switrs$DAYWEEK0
)
unique(switrs$DAYWEEK)
d2 <- switrs %>% group_by(DAYWEEK) %>% summarise(n=n())
d2 <- factor(d2$DAYWEEK, levels=c(1,2,3,4,5,6,7))
d2
d2
d2 <- switrs %>% group_by(DAYWEEK) %>% summarise(n=n())
d2
d2$DAYWEEK
ggplot(d2, aes(x=DAYWEEK, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(y=NULL, x=NULL, title="Total incidencts by Month") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0))
scale_x_discrete
d2 <- switrs %>% group_by(DAYWEEK) %>% summarise(n=n())
d2$DAYWEEK <- factor(d2$DAYWEEK)
d2
ggplot(d2, aes(x=DAYWEEK, y=n)) +
geom_bar(stat = "identity", alpha=0.6) +
theme_minimal() +
labs(y=NULL, x=NULL, title="Total incidencts by Day of Week") +
scale_x_discrete(labels=c("Su","M","Tu","W","Th","F","Sa")) +
scale_y_continuous(expand=c(0,0))
str(switrs)
timeValues <-tapply(switrs$CASEID, switrs$TIME_, length)
timeValues
timeValues <- as.data.frame(timeValues)
timeValues
timeValues$time <- row.names(timeValues)
timeValues$time <- as.POSIXlt(timeValues$time, format="%H:%M")$hour
timeValues[is.na(timeValues),] <- 0
hours <-tapply(timeValues$timeValues, timeValues$time, sum) %>% as.data.frame()
names(hours) <- "hourCount"
hours$hour <- row.names(hours)
hours <- transform(hours, hour = reorder(hour, as.numeric(hour)))
ggplot(data = hours, aes( hour, hourCount )) +
theme_minimal() +
geom_bar(stat="identity", alpha=0.3) +
stat_smooth(data=hours, aes(x=hour, y=hourCount, group = 1), colour="blue", n=24, size=2) +
labs(x=NULL, y=NULL, title="Crimes by time of day") +
expand_limits(y=0) +
scale_x_discrete(breaks=c(0,6,12,18), labels=c("12:00AM", "6:00AM", "12:00PM","6:00PM"))
timeValues <- as.data.frame(timeValues)
timeValues$time <- row.names(timeValues)
timeValues$time <- as.POSIXlt(timeValues$time, format="%H:%M")$hour
timeValues[is.na(timeValues),] <- 0
head(timeValues)
timeValues <-tapply(switrs$CASEID, switrs$TIME_, length)
timeValues <- as.data.frame(timeValues)
head(timeValues)
timeValues
timeValues$time <- row.names(timeValues)
head(timeValues)
as.POSIXlt(timeValues$time, format="%H:%M")$hour
?as.POSIXlt
as.POSIXlt(timeValues$time, format="%H%M")$hour
as.POSIXlt(timeValues$time, format="%H%M")
subset(switrs, TIME_<100)
subset(switrs, TIME_>100)
subset(switrs, TIME_<100)
subset(switrs$TIME_, TIME_<100)
subset(switrs[,"TIME_"], TIME_<100)
subset(switrs[,"TIME_"])
switrs[,"TIME_"]
subset(switrs[,"TIME_"]) %>% formatC(digits = 1, flag = "0")
switrs[,"TIME_"] %>% formatC(digits = 1, flag = "0")
switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0")
time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0")
time
?apply
time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.data.frame()
time
tapply(time, switrs$TIME_, length)
time
summary(time)
time[,1]
tapply(time, time[,1], length)
switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.data.frame()
hist(tie)
hist(time)
time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.data.frame()
time
ehad(time)
head(time)
?as.data.frame
time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% data.frame()
head(time)
timeCit <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0")
time <- data_frame(time = timeCit)
headd(time)
head(time)
switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(timeValues$time, format="%H%M")
switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(format="%H%M")
timeCit <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(format="%H%M")
range(time)
summary(time)
summary(timeCit)
range(timeCit)
time <- data_frame(time = timeCit)
head(time)
tiem
time
timeCit
time <- data_frame(timeCit)
time
time <- as.data.frame(timeCit)
time
head(time)
time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(format="%H%M")
time <- as.data.frame(time)
head(time)
timeValues <-tapply(time, time[,1], length)
switrs$time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(format="%H%M")
timeValues <-tapply(switrs$CASEID, switrs$time, length)
timeValues <-tapply(switrs$CASEID, switrs$time, length)
switrs$time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(format="%H%M")
timeValues <-tapply(switrs$CASEID, switrs$time, length)
switrs$CASEID
switrs$time
length(switrs$time)
length(switrs$CASEID)
?tapply
switrs$time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0") %>% as.POSIXlt(format="%H%M")$hour
switrs$time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0")
as.POSIXlt(switrs$time, format="%H%M")$hour
switrs$time <- as.POSIXlt(switrs$time, format="%H%M")$hour
timeValues <- as.data.frame(timeValues)
#make a column with district name
timeValues$time <- row.names(timeValues)
timeValues$time <- as.POSIXlt(timeValues$time, format="%H:%M")$hour
timeValues[is.na(timeValues),] <- 0
hours <-tapply(timeValues$timeValues, timeValues$time, sum) %>% as.data.frame()
names(hours) <- "hourCount"
hours$hour <- row.names(hours)
#sort in descending order
hours <- transform(hours, hour = reorder(hour, as.numeric(hour)))
#make plot
print(ggplot(data = hours, aes( hour, hourCount )) +
theme_minimal() +
geom_bar(stat="identity", alpha=0.3) +
stat_smooth(data=hours, aes(x=hour, y=hourCount, group = 1), colour="blue", n=24, size=2) +
labs(x=NULL, y=NULL, title="Crimes by time of day") +
expand_limits(y=0) +
scale_x_discrete(breaks=c(0,6,12,18), labels=c("12:00AM", "6:00AM", "12:00PM","6:00PM"))
)
timeValues <- as.data.frame(timeValues)
timeValues$time <- row.names(timeValues)
timeValues$time <- as.POSIXlt(timeValues$time, format="%H:%M")$hour
timeValues[is.na(timeValues),] <- 0
timeValues
switrs$time <- switrs[,"TIME_"] %>% formatC(digits = 3, flag = "0")
switrs$time <- as.POSIXlt(switrs$time, format="%H%M")$hour
timeValues <-tapply(filteredData()$IncidntNum, filteredData()$Time, length)
timeValues <-tapply(switrs$CASEID, switrs$time, length)
timeValues <- as.data.frame(timeValues)
head(timeValues)
timeValues
timeValues$time <- row.names(timeValues)
timeValues$time <- as.POSIXlt(timeValues$time, format="%H:%M")$hour
timeValues
timeValues[is.na(timeValues),] <- 0
timeValues <-tapply(switrs$CASEID, switrs$time, length)
timeValues <- as.data.frame(timeValues)
timeValues
timeValues$time <- row.names(timeValues)
timeValues
as.POSIXlt(timeValues$time, format="%H:%M")$hour
as.POSIXlt(timeValues$time, format="%H")
as.POSIXlt(timeValues$time, format="%H")$hour
timeValues$time <- as.POSIXlt(timeValues$time, format="%H")$hour
timeValues[is.na(timeValues),] <- 0
timeValues
hours <-tapply(timeValues$timeValues, timeValues$time, sum) %>% as.data.frame()
hours
names(hours) <- "hourCount"
hours$hour <- row.names(hours)
hours
hours <- transform(hours, hour = reorder(hour, as.numeric(hour)))
hours
ggplot(data = hours, aes( hour, hourCount )) +
theme_minimal() +
geom_bar(stat="identity", alpha=0.3) +
stat_smooth(data=hours, aes(x=hour, y=hourCount, group = 1), colour="blue", n=24, size=2) +
labs(x=NULL, y=NULL, title="Crimes by time of day") +
expand_limits(y=0) +
scale_x_discrete(breaks=c(0,6,12,18), labels=c("12:00AM", "6:00AM", "12:00PM","6:00PM"))
